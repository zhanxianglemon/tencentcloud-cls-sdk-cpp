// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: logproducerconfig.proto
// Protobuf C++ Version: 5.29.3

#include "logproducerconfig.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace cls_config {

inline constexpr LogProducerConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        source_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        endpoint_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        acceskeyid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        accesskeysecret_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        compressflag_{true},
        totalsizelnbytes_{::uint64_t{104857600u}},
        maxsendworkercount_{::uint64_t{50u}},
        maxblocksec_{::uint64_t{60u}},
        maxbatchsize_{::uint64_t{524288u}},
        lingerms_{::uint64_t{2000u}},
        retries_{::uint64_t{10u}},
        baseretrybackoffms_{::uint64_t{100u}},
        maxretrybackoffms_{::uint64_t{50000u}},
        socktimeout_{::uint64_t{30u}},
        connecttimeout_{::uint64_t{5u}} {}

template <typename>
PROTOBUF_CONSTEXPR LogProducerConfig::LogProducerConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LogProducerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogProducerConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogProducerConfigDefaultTypeInternal() {}
  union {
    LogProducerConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogProducerConfigDefaultTypeInternal _LogProducerConfig_default_instance_;
}  // namespace cls_config
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_logproducerconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_logproducerconfig_2eproto = nullptr;
const ::uint32_t
    TableStruct_logproducerconfig_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.totalsizelnbytes_),
        PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.maxsendworkercount_),
        PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.maxblocksec_),
        PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.maxbatchsize_),
        PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.lingerms_),
        PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.retries_),
        PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.baseretrybackoffms_),
        PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.maxretrybackoffms_),
        PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.compressflag_),
        PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.source_),
        PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.socktimeout_),
        PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.connecttimeout_),
        PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.token_),
        PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.endpoint_),
        PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.acceskeyid_),
        PROTOBUF_FIELD_OFFSET(::cls_config::LogProducerConfig, _impl_.accesskeysecret_),
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        5,
        0,
        14,
        15,
        1,
        2,
        3,
        4,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 24, -1, sizeof(::cls_config::LogProducerConfig)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::cls_config::_LogProducerConfig_default_instance_._instance,
};
const char descriptor_table_protodef_logproducerconfig_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\027logproducerconfig.proto\022\ncls_config\"\255\003"
    "\n\021LogProducerConfig\022#\n\020TotalSizeLnBytes\030"
    "\001 \001(\004:\t104857600\022\036\n\022MaxSendWorkerCount\030\002"
    " \001(\004:\00250\022\027\n\013MaxBlockSec\030\003 \001(\004:\00260\022\034\n\014Max"
    "BatchSize\030\004 \001(\004:\006524288\022\026\n\010LingerMs\030\005 \001("
    "\004:\0042000\022\023\n\007Retries\030\006 \001(\004:\00210\022\037\n\022BaseRetr"
    "yBackoffMs\030\007 \001(\004:\003100\022 \n\021MaxRetryBackoff"
    "Ms\030\010 \001(\004:\00550000\022\032\n\014compressflag\030\t \001(\010:\004t"
    "rue\022\016\n\006source\030\n \001(\t\022\027\n\013SockTimeout\030\013 \001(\004"
    ":\00230\022\031\n\016ConnectTimeout\030\014 \001(\004:\0015\022\r\n\005token"
    "\030\r \001(\t\022\020\n\010Endpoint\030\016 \002(\t\022\022\n\nAccesKeyId\030\017"
    " \002(\t\022\027\n\017AccessKeySecret\030\020 \002(\t"
};
static ::absl::once_flag descriptor_table_logproducerconfig_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_logproducerconfig_2eproto = {
    false,
    false,
    469,
    descriptor_table_protodef_logproducerconfig_2eproto,
    "logproducerconfig.proto",
    &descriptor_table_logproducerconfig_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_logproducerconfig_2eproto::offsets,
    file_level_enum_descriptors_logproducerconfig_2eproto,
    file_level_service_descriptors_logproducerconfig_2eproto,
};
namespace cls_config {
// ===================================================================

class LogProducerConfig::_Internal {
 public:
  using HasBits =
      decltype(std::declval<LogProducerConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001c) ^ 0x0000001c) != 0;
  }
};

LogProducerConfig::LogProducerConfig(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cls_config.LogProducerConfig)
}
inline PROTOBUF_NDEBUG_INLINE LogProducerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cls_config::LogProducerConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        source_(arena, from.source_),
        token_(arena, from.token_),
        endpoint_(arena, from.endpoint_),
        acceskeyid_(arena, from.acceskeyid_),
        accesskeysecret_(arena, from.accesskeysecret_) {}

LogProducerConfig::LogProducerConfig(
    ::google::protobuf::Arena* arena,
    const LogProducerConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LogProducerConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, compressflag_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, compressflag_),
           offsetof(Impl_, connecttimeout_) -
               offsetof(Impl_, compressflag_) +
               sizeof(Impl_::connecttimeout_));

  // @@protoc_insertion_point(copy_constructor:cls_config.LogProducerConfig)
}
inline PROTOBUF_NDEBUG_INLINE LogProducerConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        source_(arena),
        token_(arena),
        endpoint_(arena),
        acceskeyid_(arena),
        accesskeysecret_(arena),
        compressflag_{true},
        totalsizelnbytes_{::uint64_t{104857600u}},
        maxsendworkercount_{::uint64_t{50u}},
        maxblocksec_{::uint64_t{60u}},
        maxbatchsize_{::uint64_t{524288u}},
        lingerms_{::uint64_t{2000u}},
        retries_{::uint64_t{10u}},
        baseretrybackoffms_{::uint64_t{100u}},
        maxretrybackoffms_{::uint64_t{50000u}},
        socktimeout_{::uint64_t{30u}},
        connecttimeout_{::uint64_t{5u}} {}

inline void LogProducerConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
LogProducerConfig::~LogProducerConfig() {
  // @@protoc_insertion_point(destructor:cls_config.LogProducerConfig)
  SharedDtor(*this);
}
inline void LogProducerConfig::SharedDtor(MessageLite& self) {
  LogProducerConfig& this_ = static_cast<LogProducerConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.source_.Destroy();
  this_._impl_.token_.Destroy();
  this_._impl_.endpoint_.Destroy();
  this_._impl_.acceskeyid_.Destroy();
  this_._impl_.accesskeysecret_.Destroy();
  this_._impl_.~Impl_();
}

inline void* LogProducerConfig::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LogProducerConfig(arena);
}
constexpr auto LogProducerConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(LogProducerConfig),
                                            alignof(LogProducerConfig));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull LogProducerConfig::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_LogProducerConfig_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        LogProducerConfig::IsInitializedImpl,
        &LogProducerConfig::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<LogProducerConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LogProducerConfig::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<LogProducerConfig>(), &LogProducerConfig::ByteSizeLong,
            &LogProducerConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_._cached_size_),
        false,
    },
    &LogProducerConfig::kDescriptorMethods,
    &descriptor_table_logproducerconfig_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* LogProducerConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 16, 0, 97, 2> LogProducerConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_._has_bits_),
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294901760,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cls_config::LogProducerConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // required string AccessKeySecret = 16;
    {::_pbi::TcParser::FastSS2,
     {386, 4, 0, PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.accesskeysecret_)}},
    // optional uint64 TotalSizeLnBytes = 1 [default = 104857600];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(LogProducerConfig, _impl_.totalsizelnbytes_), 6>(),
     {8, 6, 0, PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.totalsizelnbytes_)}},
    // optional uint64 MaxSendWorkerCount = 2 [default = 50];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(LogProducerConfig, _impl_.maxsendworkercount_), 7>(),
     {16, 7, 0, PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.maxsendworkercount_)}},
    // optional uint64 MaxBlockSec = 3 [default = 60];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(LogProducerConfig, _impl_.maxblocksec_), 8>(),
     {24, 8, 0, PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.maxblocksec_)}},
    // optional uint64 MaxBatchSize = 4 [default = 524288];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(LogProducerConfig, _impl_.maxbatchsize_), 9>(),
     {32, 9, 0, PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.maxbatchsize_)}},
    // optional uint64 LingerMs = 5 [default = 2000];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(LogProducerConfig, _impl_.lingerms_), 10>(),
     {40, 10, 0, PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.lingerms_)}},
    // optional uint64 Retries = 6 [default = 10];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(LogProducerConfig, _impl_.retries_), 11>(),
     {48, 11, 0, PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.retries_)}},
    // optional uint64 BaseRetryBackoffMs = 7 [default = 100];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(LogProducerConfig, _impl_.baseretrybackoffms_), 12>(),
     {56, 12, 0, PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.baseretrybackoffms_)}},
    // optional uint64 MaxRetryBackoffMs = 8 [default = 50000];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(LogProducerConfig, _impl_.maxretrybackoffms_), 13>(),
     {64, 13, 0, PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.maxretrybackoffms_)}},
    // optional bool compressflag = 9 [default = true];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(LogProducerConfig, _impl_.compressflag_), 5>(),
     {72, 5, 0, PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.compressflag_)}},
    // optional string source = 10;
    {::_pbi::TcParser::FastSS1,
     {82, 0, 0, PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.source_)}},
    // optional uint64 SockTimeout = 11 [default = 30];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(LogProducerConfig, _impl_.socktimeout_), 14>(),
     {88, 14, 0, PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.socktimeout_)}},
    // optional uint64 ConnectTimeout = 12 [default = 5];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(LogProducerConfig, _impl_.connecttimeout_), 15>(),
     {96, 15, 0, PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.connecttimeout_)}},
    // optional string token = 13;
    {::_pbi::TcParser::FastSS1,
     {106, 1, 0, PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.token_)}},
    // required string Endpoint = 14;
    {::_pbi::TcParser::FastSS1,
     {114, 2, 0, PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.endpoint_)}},
    // required string AccesKeyId = 15;
    {::_pbi::TcParser::FastSS1,
     {122, 3, 0, PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.acceskeyid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint64 TotalSizeLnBytes = 1 [default = 104857600];
    {PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.totalsizelnbytes_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 MaxSendWorkerCount = 2 [default = 50];
    {PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.maxsendworkercount_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 MaxBlockSec = 3 [default = 60];
    {PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.maxblocksec_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 MaxBatchSize = 4 [default = 524288];
    {PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.maxbatchsize_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 LingerMs = 5 [default = 2000];
    {PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.lingerms_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 Retries = 6 [default = 10];
    {PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.retries_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 BaseRetryBackoffMs = 7 [default = 100];
    {PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.baseretrybackoffms_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 MaxRetryBackoffMs = 8 [default = 50000];
    {PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.maxretrybackoffms_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional bool compressflag = 9 [default = true];
    {PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.compressflag_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string source = 10;
    {PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.source_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint64 SockTimeout = 11 [default = 30];
    {PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.socktimeout_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 ConnectTimeout = 12 [default = 5];
    {PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.connecttimeout_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional string token = 13;
    {PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.token_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // required string Endpoint = 14;
    {PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.endpoint_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // required string AccesKeyId = 15;
    {PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.acceskeyid_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // required string AccessKeySecret = 16;
    {PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.accesskeysecret_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\34\0\0\0\0\0\0\0\0\0\6\0\0\5\10\12\17\0\0\0\0\0\0\0"
    "cls_config.LogProducerConfig"
    "source"
    "token"
    "Endpoint"
    "AccesKeyId"
    "AccessKeySecret"
  }},
};

PROTOBUF_NOINLINE void LogProducerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:cls_config.LogProducerConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.endpoint_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.acceskeyid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.accesskeysecret_.ClearNonDefaultToEmpty();
    }
    _impl_.compressflag_ = true;
    _impl_.totalsizelnbytes_ = ::uint64_t{104857600u};
    _impl_.maxsendworkercount_ = ::uint64_t{50u};
  }
  if (cached_has_bits & 0x0000ff00u) {
    _impl_.maxblocksec_ = ::uint64_t{60u};
    _impl_.maxbatchsize_ = ::uint64_t{524288u};
    _impl_.lingerms_ = ::uint64_t{2000u};
    _impl_.retries_ = ::uint64_t{10u};
    _impl_.baseretrybackoffms_ = ::uint64_t{100u};
    _impl_.maxretrybackoffms_ = ::uint64_t{50000u};
    _impl_.socktimeout_ = ::uint64_t{30u};
    _impl_.connecttimeout_ = ::uint64_t{5u};
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LogProducerConfig::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LogProducerConfig& this_ = static_cast<const LogProducerConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LogProducerConfig::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LogProducerConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cls_config.LogProducerConfig)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional uint64 TotalSizeLnBytes = 1 [default = 104857600];
          if (cached_has_bits & 0x00000040u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                1, this_._internal_totalsizelnbytes(), target);
          }

          // optional uint64 MaxSendWorkerCount = 2 [default = 50];
          if (cached_has_bits & 0x00000080u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                2, this_._internal_maxsendworkercount(), target);
          }

          // optional uint64 MaxBlockSec = 3 [default = 60];
          if (cached_has_bits & 0x00000100u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                3, this_._internal_maxblocksec(), target);
          }

          // optional uint64 MaxBatchSize = 4 [default = 524288];
          if (cached_has_bits & 0x00000200u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                4, this_._internal_maxbatchsize(), target);
          }

          // optional uint64 LingerMs = 5 [default = 2000];
          if (cached_has_bits & 0x00000400u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                5, this_._internal_lingerms(), target);
          }

          // optional uint64 Retries = 6 [default = 10];
          if (cached_has_bits & 0x00000800u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                6, this_._internal_retries(), target);
          }

          // optional uint64 BaseRetryBackoffMs = 7 [default = 100];
          if (cached_has_bits & 0x00001000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                7, this_._internal_baseretrybackoffms(), target);
          }

          // optional uint64 MaxRetryBackoffMs = 8 [default = 50000];
          if (cached_has_bits & 0x00002000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                8, this_._internal_maxretrybackoffms(), target);
          }

          // optional bool compressflag = 9 [default = true];
          if (cached_has_bits & 0x00000020u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                9, this_._internal_compressflag(), target);
          }

          // optional string source = 10;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_source();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "cls_config.LogProducerConfig.source");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          // optional uint64 SockTimeout = 11 [default = 30];
          if (cached_has_bits & 0x00004000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                11, this_._internal_socktimeout(), target);
          }

          // optional uint64 ConnectTimeout = 12 [default = 5];
          if (cached_has_bits & 0x00008000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                12, this_._internal_connecttimeout(), target);
          }

          // optional string token = 13;
          if (cached_has_bits & 0x00000002u) {
            const std::string& _s = this_._internal_token();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "cls_config.LogProducerConfig.token");
            target = stream->WriteStringMaybeAliased(13, _s, target);
          }

          // required string Endpoint = 14;
          if (cached_has_bits & 0x00000004u) {
            const std::string& _s = this_._internal_endpoint();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "cls_config.LogProducerConfig.Endpoint");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          // required string AccesKeyId = 15;
          if (cached_has_bits & 0x00000008u) {
            const std::string& _s = this_._internal_acceskeyid();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "cls_config.LogProducerConfig.AccesKeyId");
            target = stream->WriteStringMaybeAliased(15, _s, target);
          }

          // required string AccessKeySecret = 16;
          if (cached_has_bits & 0x00000010u) {
            const std::string& _s = this_._internal_accesskeysecret();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "cls_config.LogProducerConfig.AccessKeySecret");
            target = stream->WriteStringMaybeAliased(16, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cls_config.LogProducerConfig)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LogProducerConfig::ByteSizeLong(const MessageLite& base) {
          const LogProducerConfig& this_ = static_cast<const LogProducerConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LogProducerConfig::ByteSizeLong() const {
          const LogProducerConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cls_config.LogProducerConfig)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional string source = 10;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_source());
            }
            // optional string token = 13;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_token());
            }
          }
          if (cached_has_bits & 0x0000001cu) {
            // required string Endpoint = 14;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_endpoint());
            }
            // required string AccesKeyId = 15;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_acceskeyid());
            }
            // required string AccessKeySecret = 16;
            if (cached_has_bits & 0x00000010u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_accesskeysecret());
            }
          }
          if (cached_has_bits & 0x000000e0u) {
            // optional bool compressflag = 9 [default = true];
            if (cached_has_bits & 0x00000020u) {
              total_size += 2;
            }
            // optional uint64 TotalSizeLnBytes = 1 [default = 104857600];
            if (cached_has_bits & 0x00000040u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_totalsizelnbytes());
            }
            // optional uint64 MaxSendWorkerCount = 2 [default = 50];
            if (cached_has_bits & 0x00000080u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_maxsendworkercount());
            }
          }
          if (cached_has_bits & 0x0000ff00u) {
            // optional uint64 MaxBlockSec = 3 [default = 60];
            if (cached_has_bits & 0x00000100u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_maxblocksec());
            }
            // optional uint64 MaxBatchSize = 4 [default = 524288];
            if (cached_has_bits & 0x00000200u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_maxbatchsize());
            }
            // optional uint64 LingerMs = 5 [default = 2000];
            if (cached_has_bits & 0x00000400u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_lingerms());
            }
            // optional uint64 Retries = 6 [default = 10];
            if (cached_has_bits & 0x00000800u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_retries());
            }
            // optional uint64 BaseRetryBackoffMs = 7 [default = 100];
            if (cached_has_bits & 0x00001000u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_baseretrybackoffms());
            }
            // optional uint64 MaxRetryBackoffMs = 8 [default = 50000];
            if (cached_has_bits & 0x00002000u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_maxretrybackoffms());
            }
            // optional uint64 SockTimeout = 11 [default = 30];
            if (cached_has_bits & 0x00004000u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_socktimeout());
            }
            // optional uint64 ConnectTimeout = 12 [default = 5];
            if (cached_has_bits & 0x00008000u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_connecttimeout());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void LogProducerConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LogProducerConfig*>(&to_msg);
  auto& from = static_cast<const LogProducerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cls_config.LogProducerConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_endpoint(from._internal_endpoint());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_acceskeyid(from._internal_acceskeyid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_accesskeysecret(from._internal_accesskeysecret());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.compressflag_ = from._impl_.compressflag_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.totalsizelnbytes_ = from._impl_.totalsizelnbytes_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.maxsendworkercount_ = from._impl_.maxsendworkercount_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.maxblocksec_ = from._impl_.maxblocksec_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.maxbatchsize_ = from._impl_.maxbatchsize_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.lingerms_ = from._impl_.lingerms_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.retries_ = from._impl_.retries_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.baseretrybackoffms_ = from._impl_.baseretrybackoffms_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.maxretrybackoffms_ = from._impl_.maxretrybackoffms_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.socktimeout_ = from._impl_.socktimeout_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.connecttimeout_ = from._impl_.connecttimeout_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LogProducerConfig::CopyFrom(const LogProducerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cls_config.LogProducerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LogProducerConfig::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const LogProducerConfig&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void LogProducerConfig::InternalSwap(LogProducerConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_, &other->_impl_.source_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.token_, &other->_impl_.token_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.endpoint_, &other->_impl_.endpoint_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.acceskeyid_, &other->_impl_.acceskeyid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.accesskeysecret_, &other->_impl_.accesskeysecret_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.connecttimeout_)
      + sizeof(LogProducerConfig::_impl_.connecttimeout_)
      - PROTOBUF_FIELD_OFFSET(LogProducerConfig, _impl_.compressflag_)>(
          reinterpret_cast<char*>(&_impl_.compressflag_),
          reinterpret_cast<char*>(&other->_impl_.compressflag_));
}

::google::protobuf::Metadata LogProducerConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace cls_config
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_logproducerconfig_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
