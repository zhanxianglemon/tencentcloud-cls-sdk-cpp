// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: logproducerconfig.proto
// Protobuf C++ Version: 5.29.3

#ifndef logproducerconfig_2eproto_2epb_2eh
#define logproducerconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_logproducerconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_logproducerconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_logproducerconfig_2eproto;
namespace cls_config {
class LogProducerConfig;
struct LogProducerConfigDefaultTypeInternal;
extern LogProducerConfigDefaultTypeInternal _LogProducerConfig_default_instance_;
}  // namespace cls_config
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cls_config {

// ===================================================================


// -------------------------------------------------------------------

class LogProducerConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cls_config.LogProducerConfig) */ {
 public:
  inline LogProducerConfig() : LogProducerConfig(nullptr) {}
  ~LogProducerConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LogProducerConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LogProducerConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LogProducerConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline LogProducerConfig(const LogProducerConfig& from) : LogProducerConfig(nullptr, from) {}
  inline LogProducerConfig(LogProducerConfig&& from) noexcept
      : LogProducerConfig(nullptr, std::move(from)) {}
  inline LogProducerConfig& operator=(const LogProducerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogProducerConfig& operator=(LogProducerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogProducerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogProducerConfig* internal_default_instance() {
    return reinterpret_cast<const LogProducerConfig*>(
        &_LogProducerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(LogProducerConfig& a, LogProducerConfig& b) { a.Swap(&b); }
  inline void Swap(LogProducerConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogProducerConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogProducerConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LogProducerConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogProducerConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LogProducerConfig& from) { LogProducerConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LogProducerConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cls_config.LogProducerConfig"; }

 protected:
  explicit LogProducerConfig(::google::protobuf::Arena* arena);
  LogProducerConfig(::google::protobuf::Arena* arena, const LogProducerConfig& from);
  LogProducerConfig(::google::protobuf::Arena* arena, LogProducerConfig&& from) noexcept
      : LogProducerConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSourceFieldNumber = 10,
    kTokenFieldNumber = 13,
    kEndpointFieldNumber = 14,
    kAccesKeyIdFieldNumber = 15,
    kAccessKeySecretFieldNumber = 16,
    kCompressflagFieldNumber = 9,
    kTotalSizeLnBytesFieldNumber = 1,
    kMaxSendWorkerCountFieldNumber = 2,
    kMaxBlockSecFieldNumber = 3,
    kMaxBatchSizeFieldNumber = 4,
    kLingerMsFieldNumber = 5,
    kRetriesFieldNumber = 6,
    kBaseRetryBackoffMsFieldNumber = 7,
    kMaxRetryBackoffMsFieldNumber = 8,
    kSockTimeoutFieldNumber = 11,
    kConnectTimeoutFieldNumber = 12,
  };
  // optional string source = 10;
  bool has_source() const;
  void clear_source() ;
  const std::string& source() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source(Arg_&& arg, Args_... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* value);

  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(
      const std::string& value);
  std::string* _internal_mutable_source();

  public:
  // optional string token = 13;
  bool has_token() const;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // required string Endpoint = 14;
  bool has_endpoint() const;
  void clear_endpoint() ;
  const std::string& endpoint() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_endpoint(Arg_&& arg, Args_... args);
  std::string* mutable_endpoint();
  PROTOBUF_NODISCARD std::string* release_endpoint();
  void set_allocated_endpoint(std::string* value);

  private:
  const std::string& _internal_endpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_endpoint(
      const std::string& value);
  std::string* _internal_mutable_endpoint();

  public:
  // required string AccesKeyId = 15;
  bool has_acceskeyid() const;
  void clear_acceskeyid() ;
  const std::string& acceskeyid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_acceskeyid(Arg_&& arg, Args_... args);
  std::string* mutable_acceskeyid();
  PROTOBUF_NODISCARD std::string* release_acceskeyid();
  void set_allocated_acceskeyid(std::string* value);

  private:
  const std::string& _internal_acceskeyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acceskeyid(
      const std::string& value);
  std::string* _internal_mutable_acceskeyid();

  public:
  // required string AccessKeySecret = 16;
  bool has_accesskeysecret() const;
  void clear_accesskeysecret() ;
  const std::string& accesskeysecret() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_accesskeysecret(Arg_&& arg, Args_... args);
  std::string* mutable_accesskeysecret();
  PROTOBUF_NODISCARD std::string* release_accesskeysecret();
  void set_allocated_accesskeysecret(std::string* value);

  private:
  const std::string& _internal_accesskeysecret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesskeysecret(
      const std::string& value);
  std::string* _internal_mutable_accesskeysecret();

  public:
  // optional bool compressflag = 9 [default = true];
  bool has_compressflag() const;
  void clear_compressflag() ;
  bool compressflag() const;
  void set_compressflag(bool value);

  private:
  bool _internal_compressflag() const;
  void _internal_set_compressflag(bool value);

  public:
  // optional uint64 TotalSizeLnBytes = 1 [default = 104857600];
  bool has_totalsizelnbytes() const;
  void clear_totalsizelnbytes() ;
  ::uint64_t totalsizelnbytes() const;
  void set_totalsizelnbytes(::uint64_t value);

  private:
  ::uint64_t _internal_totalsizelnbytes() const;
  void _internal_set_totalsizelnbytes(::uint64_t value);

  public:
  // optional uint64 MaxSendWorkerCount = 2 [default = 50];
  bool has_maxsendworkercount() const;
  void clear_maxsendworkercount() ;
  ::uint64_t maxsendworkercount() const;
  void set_maxsendworkercount(::uint64_t value);

  private:
  ::uint64_t _internal_maxsendworkercount() const;
  void _internal_set_maxsendworkercount(::uint64_t value);

  public:
  // optional uint64 MaxBlockSec = 3 [default = 60];
  bool has_maxblocksec() const;
  void clear_maxblocksec() ;
  ::uint64_t maxblocksec() const;
  void set_maxblocksec(::uint64_t value);

  private:
  ::uint64_t _internal_maxblocksec() const;
  void _internal_set_maxblocksec(::uint64_t value);

  public:
  // optional uint64 MaxBatchSize = 4 [default = 524288];
  bool has_maxbatchsize() const;
  void clear_maxbatchsize() ;
  ::uint64_t maxbatchsize() const;
  void set_maxbatchsize(::uint64_t value);

  private:
  ::uint64_t _internal_maxbatchsize() const;
  void _internal_set_maxbatchsize(::uint64_t value);

  public:
  // optional uint64 LingerMs = 5 [default = 2000];
  bool has_lingerms() const;
  void clear_lingerms() ;
  ::uint64_t lingerms() const;
  void set_lingerms(::uint64_t value);

  private:
  ::uint64_t _internal_lingerms() const;
  void _internal_set_lingerms(::uint64_t value);

  public:
  // optional uint64 Retries = 6 [default = 10];
  bool has_retries() const;
  void clear_retries() ;
  ::uint64_t retries() const;
  void set_retries(::uint64_t value);

  private:
  ::uint64_t _internal_retries() const;
  void _internal_set_retries(::uint64_t value);

  public:
  // optional uint64 BaseRetryBackoffMs = 7 [default = 100];
  bool has_baseretrybackoffms() const;
  void clear_baseretrybackoffms() ;
  ::uint64_t baseretrybackoffms() const;
  void set_baseretrybackoffms(::uint64_t value);

  private:
  ::uint64_t _internal_baseretrybackoffms() const;
  void _internal_set_baseretrybackoffms(::uint64_t value);

  public:
  // optional uint64 MaxRetryBackoffMs = 8 [default = 50000];
  bool has_maxretrybackoffms() const;
  void clear_maxretrybackoffms() ;
  ::uint64_t maxretrybackoffms() const;
  void set_maxretrybackoffms(::uint64_t value);

  private:
  ::uint64_t _internal_maxretrybackoffms() const;
  void _internal_set_maxretrybackoffms(::uint64_t value);

  public:
  // optional uint64 SockTimeout = 11 [default = 30];
  bool has_socktimeout() const;
  void clear_socktimeout() ;
  ::uint64_t socktimeout() const;
  void set_socktimeout(::uint64_t value);

  private:
  ::uint64_t _internal_socktimeout() const;
  void _internal_set_socktimeout(::uint64_t value);

  public:
  // optional uint64 ConnectTimeout = 12 [default = 5];
  bool has_connecttimeout() const;
  void clear_connecttimeout() ;
  ::uint64_t connecttimeout() const;
  void set_connecttimeout(::uint64_t value);

  private:
  ::uint64_t _internal_connecttimeout() const;
  void _internal_set_connecttimeout(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cls_config.LogProducerConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 16, 0,
      97, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LogProducerConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr source_;
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::google::protobuf::internal::ArenaStringPtr endpoint_;
    ::google::protobuf::internal::ArenaStringPtr acceskeyid_;
    ::google::protobuf::internal::ArenaStringPtr accesskeysecret_;
    bool compressflag_;
    ::uint64_t totalsizelnbytes_;
    ::uint64_t maxsendworkercount_;
    ::uint64_t maxblocksec_;
    ::uint64_t maxbatchsize_;
    ::uint64_t lingerms_;
    ::uint64_t retries_;
    ::uint64_t baseretrybackoffms_;
    ::uint64_t maxretrybackoffms_;
    ::uint64_t socktimeout_;
    ::uint64_t connecttimeout_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_logproducerconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LogProducerConfig

// optional uint64 TotalSizeLnBytes = 1 [default = 104857600];
inline bool LogProducerConfig::has_totalsizelnbytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void LogProducerConfig::clear_totalsizelnbytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.totalsizelnbytes_ = ::uint64_t{104857600u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t LogProducerConfig::totalsizelnbytes() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.TotalSizeLnBytes)
  return _internal_totalsizelnbytes();
}
inline void LogProducerConfig::set_totalsizelnbytes(::uint64_t value) {
  _internal_set_totalsizelnbytes(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.TotalSizeLnBytes)
}
inline ::uint64_t LogProducerConfig::_internal_totalsizelnbytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.totalsizelnbytes_;
}
inline void LogProducerConfig::_internal_set_totalsizelnbytes(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.totalsizelnbytes_ = value;
}

// optional uint64 MaxSendWorkerCount = 2 [default = 50];
inline bool LogProducerConfig::has_maxsendworkercount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void LogProducerConfig::clear_maxsendworkercount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxsendworkercount_ = ::uint64_t{50u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint64_t LogProducerConfig::maxsendworkercount() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.MaxSendWorkerCount)
  return _internal_maxsendworkercount();
}
inline void LogProducerConfig::set_maxsendworkercount(::uint64_t value) {
  _internal_set_maxsendworkercount(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.MaxSendWorkerCount)
}
inline ::uint64_t LogProducerConfig::_internal_maxsendworkercount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.maxsendworkercount_;
}
inline void LogProducerConfig::_internal_set_maxsendworkercount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxsendworkercount_ = value;
}

// optional uint64 MaxBlockSec = 3 [default = 60];
inline bool LogProducerConfig::has_maxblocksec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void LogProducerConfig::clear_maxblocksec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxblocksec_ = ::uint64_t{60u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint64_t LogProducerConfig::maxblocksec() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.MaxBlockSec)
  return _internal_maxblocksec();
}
inline void LogProducerConfig::set_maxblocksec(::uint64_t value) {
  _internal_set_maxblocksec(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.MaxBlockSec)
}
inline ::uint64_t LogProducerConfig::_internal_maxblocksec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.maxblocksec_;
}
inline void LogProducerConfig::_internal_set_maxblocksec(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxblocksec_ = value;
}

// optional uint64 MaxBatchSize = 4 [default = 524288];
inline bool LogProducerConfig::has_maxbatchsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void LogProducerConfig::clear_maxbatchsize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxbatchsize_ = ::uint64_t{524288u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint64_t LogProducerConfig::maxbatchsize() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.MaxBatchSize)
  return _internal_maxbatchsize();
}
inline void LogProducerConfig::set_maxbatchsize(::uint64_t value) {
  _internal_set_maxbatchsize(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.MaxBatchSize)
}
inline ::uint64_t LogProducerConfig::_internal_maxbatchsize() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.maxbatchsize_;
}
inline void LogProducerConfig::_internal_set_maxbatchsize(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxbatchsize_ = value;
}

// optional uint64 LingerMs = 5 [default = 2000];
inline bool LogProducerConfig::has_lingerms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void LogProducerConfig::clear_lingerms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lingerms_ = ::uint64_t{2000u};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint64_t LogProducerConfig::lingerms() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.LingerMs)
  return _internal_lingerms();
}
inline void LogProducerConfig::set_lingerms(::uint64_t value) {
  _internal_set_lingerms(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.LingerMs)
}
inline ::uint64_t LogProducerConfig::_internal_lingerms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lingerms_;
}
inline void LogProducerConfig::_internal_set_lingerms(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lingerms_ = value;
}

// optional uint64 Retries = 6 [default = 10];
inline bool LogProducerConfig::has_retries() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void LogProducerConfig::clear_retries() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retries_ = ::uint64_t{10u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint64_t LogProducerConfig::retries() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.Retries)
  return _internal_retries();
}
inline void LogProducerConfig::set_retries(::uint64_t value) {
  _internal_set_retries(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.Retries)
}
inline ::uint64_t LogProducerConfig::_internal_retries() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retries_;
}
inline void LogProducerConfig::_internal_set_retries(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retries_ = value;
}

// optional uint64 BaseRetryBackoffMs = 7 [default = 100];
inline bool LogProducerConfig::has_baseretrybackoffms() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void LogProducerConfig::clear_baseretrybackoffms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.baseretrybackoffms_ = ::uint64_t{100u};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::uint64_t LogProducerConfig::baseretrybackoffms() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.BaseRetryBackoffMs)
  return _internal_baseretrybackoffms();
}
inline void LogProducerConfig::set_baseretrybackoffms(::uint64_t value) {
  _internal_set_baseretrybackoffms(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.BaseRetryBackoffMs)
}
inline ::uint64_t LogProducerConfig::_internal_baseretrybackoffms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.baseretrybackoffms_;
}
inline void LogProducerConfig::_internal_set_baseretrybackoffms(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.baseretrybackoffms_ = value;
}

// optional uint64 MaxRetryBackoffMs = 8 [default = 50000];
inline bool LogProducerConfig::has_maxretrybackoffms() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void LogProducerConfig::clear_maxretrybackoffms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxretrybackoffms_ = ::uint64_t{50000u};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::uint64_t LogProducerConfig::maxretrybackoffms() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.MaxRetryBackoffMs)
  return _internal_maxretrybackoffms();
}
inline void LogProducerConfig::set_maxretrybackoffms(::uint64_t value) {
  _internal_set_maxretrybackoffms(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.MaxRetryBackoffMs)
}
inline ::uint64_t LogProducerConfig::_internal_maxretrybackoffms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.maxretrybackoffms_;
}
inline void LogProducerConfig::_internal_set_maxretrybackoffms(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxretrybackoffms_ = value;
}

// optional bool compressflag = 9 [default = true];
inline bool LogProducerConfig::has_compressflag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void LogProducerConfig::clear_compressflag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compressflag_ = true;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool LogProducerConfig::compressflag() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.compressflag)
  return _internal_compressflag();
}
inline void LogProducerConfig::set_compressflag(bool value) {
  _internal_set_compressflag(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.compressflag)
}
inline bool LogProducerConfig::_internal_compressflag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.compressflag_;
}
inline void LogProducerConfig::_internal_set_compressflag(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compressflag_ = value;
}

// optional string source = 10;
inline bool LogProducerConfig::has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LogProducerConfig::clear_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogProducerConfig::source() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.source)
  return _internal_source();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogProducerConfig::set_source(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.source)
}
inline std::string* LogProducerConfig::mutable_source() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:cls_config.LogProducerConfig.source)
  return _s;
}
inline const std::string& LogProducerConfig::_internal_source() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_.Get();
}
inline void LogProducerConfig::_internal_set_source(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_.Set(value, GetArena());
}
inline std::string* LogProducerConfig::_internal_mutable_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_.Mutable( GetArena());
}
inline std::string* LogProducerConfig::release_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cls_config.LogProducerConfig.source)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.source_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.source_.Set("", GetArena());
  }
  return released;
}
inline void LogProducerConfig::set_allocated_source(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cls_config.LogProducerConfig.source)
}

// optional uint64 SockTimeout = 11 [default = 30];
inline bool LogProducerConfig::has_socktimeout() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void LogProducerConfig::clear_socktimeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.socktimeout_ = ::uint64_t{30u};
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::uint64_t LogProducerConfig::socktimeout() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.SockTimeout)
  return _internal_socktimeout();
}
inline void LogProducerConfig::set_socktimeout(::uint64_t value) {
  _internal_set_socktimeout(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.SockTimeout)
}
inline ::uint64_t LogProducerConfig::_internal_socktimeout() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.socktimeout_;
}
inline void LogProducerConfig::_internal_set_socktimeout(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.socktimeout_ = value;
}

// optional uint64 ConnectTimeout = 12 [default = 5];
inline bool LogProducerConfig::has_connecttimeout() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void LogProducerConfig::clear_connecttimeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connecttimeout_ = ::uint64_t{5u};
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::uint64_t LogProducerConfig::connecttimeout() const {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.ConnectTimeout)
  return _internal_connecttimeout();
}
inline void LogProducerConfig::set_connecttimeout(::uint64_t value) {
  _internal_set_connecttimeout(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.ConnectTimeout)
}
inline ::uint64_t LogProducerConfig::_internal_connecttimeout() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.connecttimeout_;
}
inline void LogProducerConfig::_internal_set_connecttimeout(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connecttimeout_ = value;
}

// optional string token = 13;
inline bool LogProducerConfig::has_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void LogProducerConfig::clear_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LogProducerConfig::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogProducerConfig::set_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.token)
}
inline std::string* LogProducerConfig::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:cls_config.LogProducerConfig.token)
  return _s;
}
inline const std::string& LogProducerConfig::_internal_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_.Get();
}
inline void LogProducerConfig::_internal_set_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.token_.Set(value, GetArena());
}
inline std::string* LogProducerConfig::_internal_mutable_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* LogProducerConfig::release_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cls_config.LogProducerConfig.token)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.token_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.token_.Set("", GetArena());
  }
  return released;
}
inline void LogProducerConfig::set_allocated_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cls_config.LogProducerConfig.token)
}

// required string Endpoint = 14;
inline bool LogProducerConfig::has_endpoint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void LogProducerConfig::clear_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.endpoint_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LogProducerConfig::endpoint() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.Endpoint)
  return _internal_endpoint();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogProducerConfig::set_endpoint(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.endpoint_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.Endpoint)
}
inline std::string* LogProducerConfig::mutable_endpoint() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_endpoint();
  // @@protoc_insertion_point(field_mutable:cls_config.LogProducerConfig.Endpoint)
  return _s;
}
inline const std::string& LogProducerConfig::_internal_endpoint() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.endpoint_.Get();
}
inline void LogProducerConfig::_internal_set_endpoint(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.endpoint_.Set(value, GetArena());
}
inline std::string* LogProducerConfig::_internal_mutable_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.endpoint_.Mutable( GetArena());
}
inline std::string* LogProducerConfig::release_endpoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cls_config.LogProducerConfig.Endpoint)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.endpoint_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.endpoint_.Set("", GetArena());
  }
  return released;
}
inline void LogProducerConfig::set_allocated_endpoint(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.endpoint_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.endpoint_.IsDefault()) {
    _impl_.endpoint_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cls_config.LogProducerConfig.Endpoint)
}

// required string AccesKeyId = 15;
inline bool LogProducerConfig::has_acceskeyid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void LogProducerConfig::clear_acceskeyid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acceskeyid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& LogProducerConfig::acceskeyid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.AccesKeyId)
  return _internal_acceskeyid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogProducerConfig::set_acceskeyid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.acceskeyid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.AccesKeyId)
}
inline std::string* LogProducerConfig::mutable_acceskeyid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_acceskeyid();
  // @@protoc_insertion_point(field_mutable:cls_config.LogProducerConfig.AccesKeyId)
  return _s;
}
inline const std::string& LogProducerConfig::_internal_acceskeyid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acceskeyid_.Get();
}
inline void LogProducerConfig::_internal_set_acceskeyid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.acceskeyid_.Set(value, GetArena());
}
inline std::string* LogProducerConfig::_internal_mutable_acceskeyid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.acceskeyid_.Mutable( GetArena());
}
inline std::string* LogProducerConfig::release_acceskeyid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cls_config.LogProducerConfig.AccesKeyId)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.acceskeyid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.acceskeyid_.Set("", GetArena());
  }
  return released;
}
inline void LogProducerConfig::set_allocated_acceskeyid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.acceskeyid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.acceskeyid_.IsDefault()) {
    _impl_.acceskeyid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cls_config.LogProducerConfig.AccesKeyId)
}

// required string AccessKeySecret = 16;
inline bool LogProducerConfig::has_accesskeysecret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void LogProducerConfig::clear_accesskeysecret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accesskeysecret_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& LogProducerConfig::accesskeysecret() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cls_config.LogProducerConfig.AccessKeySecret)
  return _internal_accesskeysecret();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogProducerConfig::set_accesskeysecret(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.accesskeysecret_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cls_config.LogProducerConfig.AccessKeySecret)
}
inline std::string* LogProducerConfig::mutable_accesskeysecret() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_accesskeysecret();
  // @@protoc_insertion_point(field_mutable:cls_config.LogProducerConfig.AccessKeySecret)
  return _s;
}
inline const std::string& LogProducerConfig::_internal_accesskeysecret() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accesskeysecret_.Get();
}
inline void LogProducerConfig::_internal_set_accesskeysecret(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.accesskeysecret_.Set(value, GetArena());
}
inline std::string* LogProducerConfig::_internal_mutable_accesskeysecret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.accesskeysecret_.Mutable( GetArena());
}
inline std::string* LogProducerConfig::release_accesskeysecret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cls_config.LogProducerConfig.AccessKeySecret)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.accesskeysecret_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.accesskeysecret_.Set("", GetArena());
  }
  return released;
}
inline void LogProducerConfig::set_allocated_accesskeysecret(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.accesskeysecret_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.accesskeysecret_.IsDefault()) {
    _impl_.accesskeysecret_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cls_config.LogProducerConfig.AccessKeySecret)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace cls_config


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // logproducerconfig_2eproto_2epb_2eh
